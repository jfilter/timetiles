/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    catalogs: Catalog;
    datasets: Dataset;
    'dataset-schemas': DatasetSchema;
    'import-files': ImportFile;
    'import-jobs': ImportJob;
    'scheduled-imports': ScheduledImport;
    events: Event;
    users: User;
    media: Media;
    'location-cache': LocationCache;
    'geocoding-providers': GeocodingProvider;
    pages: Page;
    'payload-jobs': PayloadJob;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    catalogs: CatalogsSelect<false> | CatalogsSelect<true>;
    datasets: DatasetsSelect<false> | DatasetsSelect<true>;
    'dataset-schemas': DatasetSchemasSelect<false> | DatasetSchemasSelect<true>;
    'import-files': ImportFilesSelect<false> | ImportFilesSelect<true>;
    'import-jobs': ImportJobsSelect<false> | ImportJobsSelect<true>;
    'scheduled-imports': ScheduledImportsSelect<false> | ScheduledImportsSelect<true>;
    events: EventsSelect<false> | EventsSelect<true>;
    users: UsersSelect<false> | UsersSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    'location-cache': LocationCacheSelect<false> | LocationCacheSelect<true>;
    'geocoding-providers': GeocodingProvidersSelect<false> | GeocodingProvidersSelect<true>;
    pages: PagesSelect<false> | PagesSelect<true>;
    'payload-jobs': PayloadJobsSelect<false> | PayloadJobsSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: number;
  };
  globals: {
    'main-menu': MainMenu;
  };
  globalsSelect: {
    'main-menu': MainMenuSelect<false> | MainMenuSelect<true>;
  };
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: {
      'dataset-detection': TaskDatasetDetection;
      'detect-schema': TaskDetectSchema;
      'analyze-duplicates': TaskAnalyzeDuplicates;
      'validate-schema': TaskValidateSchema;
      'create-schema-version': TaskCreateSchemaVersion;
      'geocode-batch': TaskGeocodeBatch;
      'create-events': TaskCreateEvents;
      'cleanup-approval-locks': TaskCleanupApprovalLocks;
      'url-fetch': TaskUrlFetch;
      'schedule-manager': TaskScheduleManager;
      inline: {
        input: unknown;
        output: unknown;
      };
    };
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "catalogs".
 */
export interface Catalog {
  id: number;
  name: string;
  description?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  /**
   * URL-friendly identifier (auto-generated from name if not provided)
   */
  slug?: string | null;
  isPublic?: boolean | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "datasets".
 */
export interface Dataset {
  id: number;
  name: string;
  description?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  /**
   * URL-friendly identifier (auto-generated from name if not provided)
   */
  slug?: string | null;
  catalog: number | Catalog;
  /**
   * ISO-639 3 letter code (e.g., eng, deu, fra)
   */
  language: string;
  isPublic?: boolean | null;
  /**
   * Additional metadata for the entity
   */
  metadata?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  idStrategy?: {
    /**
     * How to generate unique IDs for events
     */
    type: 'external' | 'computed' | 'auto' | 'hybrid';
    /**
     * JSON path to ID field (e.g., 'id' or 'metadata.uuid')
     */
    externalIdPath?: string | null;
    /**
     * Fields to combine for unique hash
     */
    computedIdFields?:
      | {
          /**
           * Path to field to include in hash
           */
          fieldPath: string;
          id?: string | null;
        }[]
      | null;
    /**
     * What to do when duplicate is found
     */
    duplicateStrategy?: ('skip' | 'update' | 'version') | null;
  };
  schemaConfig?: {
    /**
     * Enable schema detection and validation
     */
    enabled?: boolean | null;
    /**
     * Require manual approval for ALL schema changes
     */
    locked?: boolean | null;
    /**
     * Allow automatic schema growth (new optional fields, new enum values)
     */
    autoGrow?: boolean | null;
    /**
     * Automatically approve non-breaking schema changes
     */
    autoApproveNonBreaking?: boolean | null;
    /**
     * Block entire import if any events fail validation
     */
    strictValidation?: boolean | null;
    /**
     * Allow automatic type transformations during import
     */
    allowTransformations?: boolean | null;
    /**
     * Maximum nesting depth for schema detection
     */
    maxSchemaDepth?: number | null;
    /**
     * Threshold for enum detection
     */
    enumThreshold?: number | null;
    /**
     * How to detect enum fields
     */
    enumMode?: ('count' | 'percentage') | null;
  };
  deduplicationConfig?: {
    /**
     * Enable duplicate detection during imports
     */
    enabled?: boolean | null;
    /**
     * What to do when duplicate is found
     */
    strategy?: ('skip' | 'update' | 'version') | null;
  };
  /**
   * Statistics and metadata about each field
   */
  fieldMetadata?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  /**
   * Rules for handling type mismatches
   */
  typeTransformations?:
    | {
        /**
         * JSON path to field (e.g., 'temperature' or 'location.altitude')
         */
        fieldPath: string;
        fromType: 'string' | 'number' | 'boolean' | 'null' | 'array' | 'object';
        toType: 'string' | 'number' | 'boolean' | 'date' | 'array' | 'object';
        transformStrategy: 'parse' | 'cast' | 'custom' | 'reject';
        /**
         * Function(value, context) => transformedValue
         */
        customTransform?: string | null;
        enabled?: boolean | null;
        id?: string | null;
      }[]
    | null;
  enumDetection?: {
    mode?: ('count' | 'percentage' | 'disabled') | null;
    /**
     * Max unique values (count mode) or min percentage (percentage mode)
     */
    threshold?: number | null;
  };
  geoFieldDetection?: {
    /**
     * Automatically detect latitude/longitude fields
     */
    autoDetect?: boolean | null;
    /**
     * Override: JSON path to latitude (detected: location.lat, lat, latitude)
     */
    latitudePath?: string | null;
    /**
     * Override: JSON path to longitude (detected: location.lng, lng, lon, longitude)
     */
    longitudePath?: string | null;
  };
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * Schema versions for datasets with full change tracking
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "dataset-schemas".
 */
export interface DatasetSchema {
  id: number;
  /**
   * Dataset this schema belongs to
   */
  dataset: number | Dataset;
  /**
   * Schema version number (auto-incremented)
   */
  versionNumber: number;
  displayName?: string | null;
  /**
   * JSON Schema Draft 7
   */
  schema:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  /**
   * Field statistics and metadata
   */
  fieldMetadata:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  schemaSummary?: {
    totalFields?: number | null;
    newFields?:
      | {
          path?: string | null;
          id?: string | null;
        }[]
      | null;
    removedFields?:
      | {
          path?: string | null;
          id?: string | null;
        }[]
      | null;
    typeChanges?:
      | {
          path?: string | null;
          oldType?: string | null;
          newType?: string | null;
          id?: string | null;
        }[]
      | null;
    enumChanges?:
      | {
          path?: string | null;
          addedValues?:
            | {
                [k: string]: unknown;
              }
            | unknown[]
            | string
            | number
            | boolean
            | null;
          removedValues?:
            | {
                [k: string]: unknown;
              }
            | unknown[]
            | string
            | number
            | boolean
            | null;
          id?: string | null;
        }[]
      | null;
  };
  /**
   * Import jobs that contributed to this schema
   */
  importSources?:
    | {
        import: number | ImportJob;
        recordCount?: number | null;
        batchCount?: number | null;
        id?: string | null;
      }[]
    | null;
  /**
   * Whether this schema requires manual approval
   */
  approvalRequired?: boolean | null;
  approvedBy?: (number | null) | User;
  approvalNotes?: string | null;
  /**
   * Was automatically approved due to safe changes
   */
  autoApproved?: boolean | null;
  /**
   * Conflicts that require manual resolution
   */
  conflicts?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * Unified import processing pipeline
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "import-jobs".
 */
export interface ImportJob {
  id: number;
  /**
   * Source file for this import job
   */
  importFile: number | ImportFile;
  /**
   * Target dataset for imported data
   */
  dataset: number | Dataset;
  /**
   * Sheet index for Excel files (0-based)
   */
  sheetIndex?: number | null;
  /**
   * Current processing stage
   */
  stage:
    | 'analyze-duplicates'
    | 'detect-schema'
    | 'validate-schema'
    | 'await-approval'
    | 'create-schema-version'
    | 'geocode-batch'
    | 'create-events'
    | 'completed'
    | 'failed';
  progress?: {
    /**
     * Total rows/records processed so far
     */
    current?: number | null;
    /**
     * Total rows/records to process
     */
    total?: number | null;
    /**
     * Current batch being processed
     */
    batchNumber?: number | null;
  };
  /**
   * Detected JSON Schema from data
   */
  schema?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  /**
   * Progressive schema builder state for continuity across batches
   */
  schemaBuilderState?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  schemaValidation?: {
    /**
     * Whether schema is compatible with dataset schema
     */
    isCompatible?: boolean | null;
    /**
     * List of breaking schema changes
     */
    breakingChanges?:
      | {
          [k: string]: unknown;
        }
      | unknown[]
      | string
      | number
      | boolean
      | null;
    /**
     * New fields detected (auto-grow candidates)
     */
    newFields?:
      | {
          [k: string]: unknown;
        }
      | unknown[]
      | string
      | number
      | boolean
      | null;
    /**
     * Whether manual approval is required
     */
    requiresApproval?: boolean | null;
    /**
     * Reason why approval is required
     */
    approvalReason?: string | null;
    /**
     * Whether schema changes were approved
     */
    approved?: boolean | null;
    /**
     * User who approved the schema
     */
    approvedBy?: (number | null) | User;
    /**
     * When schema was approved
     */
    approvedAt?: string | null;
  };
  /**
   * The schema version this import was validated against
   */
  datasetSchemaVersion?: (number | null) | DatasetSchema;
  duplicates?: {
    /**
     * Deduplication strategy used (external-id, computed-hash, etc.)
     */
    strategy?: string | null;
    /**
     * Duplicates found within this import
     */
    internal?:
      | {
          [k: string]: unknown;
        }
      | unknown[]
      | string
      | number
      | boolean
      | null;
    /**
     * Duplicates found with existing events
     */
    external?:
      | {
          [k: string]: unknown;
        }
      | unknown[]
      | string
      | number
      | boolean
      | null;
    summary?: {
      /**
       * Total rows analyzed
       */
      totalRows?: number | null;
      /**
       * Unique rows after deduplication
       */
      uniqueRows?: number | null;
      /**
       * Duplicates within import
       */
      internalDuplicates?: number | null;
      /**
       * Duplicates with existing data
       */
      externalDuplicates?: number | null;
    };
  };
  /**
   * Fields identified for geocoding
   */
  geocodingCandidates?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  /**
   * Geocoding results by row number
   */
  geocodingResults?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  geocodingProgress?: {
    current?: number | null;
    total?: number | null;
  };
  /**
   * Processing results and statistics
   */
  results?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  /**
   * Processing errors by row
   */
  errors?:
    | {
        row: number;
        error: string;
        id?: string | null;
      }[]
    | null;
  /**
   * Detailed error information and recovery attempts
   */
  errorLog?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  /**
   * Number of retry attempts made
   */
  retryAttempts?: number | null;
  /**
   * Timestamp of last retry attempt
   */
  lastRetryAt?: string | null;
  /**
   * Scheduled time for next retry attempt
   */
  nextRetryAt?: string | null;
  /**
   * Last stage completed successfully before failure
   */
  lastSuccessfulStage?:
    | (
        | 'analyze-duplicates'
        | 'detect-schema'
        | 'validate-schema'
        | 'await-approval'
        | 'geocode-batch'
        | 'create-events'
      )
    | null;
  displayTitle?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "import-files".
 */
export interface ImportFile {
  id: number;
  /**
   * Original user-friendly file name
   */
  originalName?: string | null;
  /**
   * The catalog this import belongs to (optional)
   */
  catalog?: (number | null) | Catalog;
  /**
   * Datasets detected in this import (optional)
   */
  datasets?: (number | Dataset)[] | null;
  /**
   * User who initiated the import (null for unauthenticated)
   */
  user?: (number | null) | User;
  /**
   * Session ID for unauthenticated users
   */
  sessionId?: string | null;
  status?: ('pending' | 'parsing' | 'processing' | 'completed' | 'failed') | null;
  /**
   * Number of datasets detected in this catalog import
   */
  datasetsCount?: number | null;
  /**
   * Number of datasets successfully processed
   */
  datasetsProcessed?: number | null;
  /**
   * Information about detected sheets/datasets in the file
   */
  sheetMetadata?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  /**
   * Payload job ID for tracking the catalog parsing job
   */
  jobId?: string | null;
  importedAt?: string | null;
  completedAt?: string | null;
  /**
   * Detailed error information
   */
  errorLog?: string | null;
  /**
   * Rate limiting information for this import
   */
  rateLimitInfo?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  /**
   * Additional import context and metadata
   */
  metadata?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: number;
  firstName?: string | null;
  lastName?: string | null;
  role?: ('user' | 'admin' | 'editor') | null;
  isActive?: boolean | null;
  lastLoginAt?: string | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  sessions?:
    | {
        id: string;
        createdAt?: string | null;
        expiresAt: string;
      }[]
    | null;
  password?: string | null;
}
/**
 * Manage scheduled URL imports that run automatically
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "scheduled-imports".
 */
export interface ScheduledImport {
  id: number;
  /**
   * Descriptive name for this scheduled import
   */
  name: string;
  /**
   * Optional description of what this import does
   */
  description?: string | null;
  /**
   * Enable/disable this scheduled import
   */
  enabled?: boolean | null;
  /**
   * URL to fetch data from
   */
  sourceUrl: string;
  /**
   * Authentication configuration for accessing the URL
   */
  authConfig?: {
    type?: ('none' | 'api-key' | 'bearer' | 'basic') | null;
    /**
     * API key value
     */
    apiKey?: string | null;
    /**
     * Header name for API key
     */
    apiKeyHeader?: string | null;
    /**
     * Bearer token value
     */
    bearerToken?: string | null;
    /**
     * Basic auth username
     */
    basicUsername?: string | null;
    /**
     * Basic auth password
     */
    basicPassword?: string | null;
    /**
     * Additional custom headers as JSON object
     */
    customHeaders?:
      | {
          [k: string]: unknown;
        }
      | unknown[]
      | string
      | number
      | boolean
      | null;
  };
  /**
   * Target catalog for imported data
   */
  catalog?: (number | null) | Catalog;
  /**
   * Configuration for mapping source data to datasets
   */
  datasetMapping?: {
    /**
     * How to map the source data to datasets
     */
    mappingType?: ('auto' | 'single' | 'multiple') | null;
    /**
     * Target dataset for single-dataset imports
     */
    singleDataset?: (number | null) | Dataset;
    /**
     * Map specific sheets to datasets
     */
    sheetMappings?:
      | {
          /**
           * Sheet name or index (0-based)
           */
          sheetIdentifier: string;
          /**
           * Target dataset for this sheet
           */
          dataset: number | Dataset;
          /**
           * Skip this sheet if not found (instead of failing)
           */
          skipIfMissing?: boolean | null;
          id?: string | null;
        }[]
      | null;
  };
  /**
   * Template for import file names. Supports: {{name}}, {{date}}, {{time}}, {{url}}
   */
  importNameTemplate?: string | null;
  /**
   * Choose between simple frequency or advanced cron scheduling
   */
  scheduleType: 'frequency' | 'cron';
  /**
   * How often to run this import
   */
  frequency?: ('hourly' | 'daily' | 'weekly' | 'monthly') | null;
  /**
   * Cron expression in UTC (e.g., '0 0 * * *' for daily at midnight UTC)
   */
  cronExpression?: string | null;
  /**
   * Maximum retry attempts on failure
   */
  maxRetries?: number | null;
  /**
   * Delay between retries in minutes
   */
  retryDelayMinutes?: number | null;
  /**
   * Timeout for URL fetch in seconds
   */
  timeoutSeconds?: number | null;
  /**
   * Last time this import was executed
   */
  lastRun?: string | null;
  /**
   * Next scheduled execution time
   */
  nextRun?: string | null;
  /**
   * Status of last execution
   */
  lastStatus?: ('success' | 'failed' | 'running') | null;
  /**
   * Error message from last failed execution
   */
  lastError?: string | null;
  /**
   * Current retry attempt count
   */
  currentRetries?: number | null;
  /**
   * Recent execution history (last 10 runs)
   */
  executionHistory?:
    | {
        executedAt: string;
        status: 'success' | 'failed';
        /**
         * ID of the created import-files record
         */
        importFileId?: string | null;
        /**
         * Error message if failed
         */
        error?: string | null;
        /**
         * Execution duration in seconds
         */
        duration?: number | null;
        id?: string | null;
      }[]
    | null;
  /**
   * Execution statistics
   */
  statistics?: {
    /**
     * Total number of executions
     */
    totalRuns?: number | null;
    /**
     * Number of successful executions
     */
    successfulRuns?: number | null;
    /**
     * Number of failed executions
     */
    failedRuns?: number | null;
    /**
     * Average execution duration in seconds
     */
    averageDuration?: number | null;
  };
  /**
   * Advanced configuration options
   */
  advancedConfig?: {
    /**
     * Skip checking if URL content has changed since last run
     */
    skipDuplicateCheck?: boolean | null;
    /**
     * Expected content type (helps with format detection)
     */
    expectedContentType?: ('auto' | 'csv' | 'json' | 'xls' | 'xlsx') | null;
    /**
     * Maximum file size in MB
     */
    maxFileSize?: number | null;
  };
  /**
   * Additional metadata and notes
   */
  metadata?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "events".
 */
export interface Event {
  id: number;
  dataset: number | Dataset;
  /**
   * The import job that created this event
   */
  importJob?: (number | null) | ImportJob;
  /**
   * Generic data in JSON format
   */
  data:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  /**
   * Geographic coordinates (WGS84)
   */
  location?: {
    latitude?: number | null;
    longitude?: number | null;
  };
  /**
   * Source and validation of coordinate data
   */
  coordinateSource?: {
    type?: ('import' | 'geocoded' | 'manual' | 'none') | null;
    importColumns?: {
      /**
       * Column name containing latitude
       */
      latitudeColumn?: string | null;
      /**
       * Column name containing longitude
       */
      longitudeColumn?: string | null;
      /**
       * Column name if coordinates were combined
       */
      combinedColumn?: string | null;
      /**
       * Format of coordinates (decimal, DMS, etc.)
       */
      format?: string | null;
    };
    /**
     * Confidence in coordinate accuracy (0-1)
     */
    confidence?: number | null;
    validationStatus?: ('valid' | 'out_of_range' | 'suspicious_zero' | 'swapped' | 'invalid') | null;
  };
  /**
   * When the actual event occurred
   */
  eventTimestamp?: string | null;
  /**
   * Validation errors if any
   */
  validationErrors?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  /**
   * Geocoding metadata and information
   */
  geocodingInfo?: {
    /**
     * Original address string from import
     */
    originalAddress?: string | null;
    /**
     * Geocoding processing status
     */
    geocodingStatus?: ('pending' | 'success' | 'failed') | null;
    /**
     * Geocoding provider used
     */
    provider?: ('google' | 'nominatim' | 'manual') | null;
    /**
     * Geocoding confidence score (0-1)
     */
    confidence?: number | null;
    /**
     * Normalized address returned by geocoder
     */
    normalizedAddress?: string | null;
  };
  /**
   * Unique identifier for deduplication (format: datasetId:strategy:value)
   */
  uniqueId: string;
  /**
   * Original ID from source system (when using external ID strategy)
   */
  sourceId?: string | null;
  /**
   * SHA256 hash of data content for duplicate detection
   */
  contentHash?: string | null;
  /**
   * Batch number within import for tracking
   */
  importBatch?: number | null;
  /**
   * Schema version number this event was validated against
   */
  schemaVersionNumber?: number | null;
  validationStatus?: ('pending' | 'valid' | 'invalid' | 'transformed') | null;
  /**
   * Record of any type transformations applied
   */
  transformations?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: number;
  /**
   * Alternative text for accessibility
   */
  alt?: string | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
  sizes?: {
    thumbnail?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    card?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    tablet?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "location-cache".
 */
export interface LocationCache {
  id: number;
  /**
   * Original address string
   */
  originalAddress: string;
  /**
   * Normalized address for better matching
   */
  normalizedAddress: string;
  /**
   * Latitude coordinate (WGS84)
   */
  latitude: number;
  /**
   * Longitude coordinate (WGS84)
   */
  longitude: number;
  /**
   * Name of the geocoding provider used
   */
  provider: string;
  /**
   * Confidence score (0-1)
   */
  confidence?: number | null;
  /**
   * Number of times this cached result was used
   */
  hitCount?: number | null;
  /**
   * Last time this cached result was accessed
   */
  lastUsed?: string | null;
  /**
   * Parsed address components
   */
  components?: {
    /**
     * Street number
     */
    streetNumber?: string | null;
    /**
     * Street name
     */
    streetName?: string | null;
    /**
     * City name
     */
    city?: string | null;
    /**
     * State/Region/Province
     */
    region?: string | null;
    /**
     * Postal/ZIP code
     */
    postalCode?: string | null;
    /**
     * Country name
     */
    country?: string | null;
  };
  /**
   * Additional provider-specific metadata
   */
  metadata?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * Manage geocoding provider configurations
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "geocoding-providers".
 */
export interface GeocodingProvider {
  id: number;
  /**
   * Unique name for this provider instance (e.g., 'Google Primary', 'Nominatim EU')
   */
  name: string;
  /**
   * The geocoding service provider
   */
  type: 'google' | 'nominatim' | 'opencage';
  /**
   * Enable this provider instance
   */
  enabled?: boolean | null;
  /**
   * Provider priority (1 = highest priority, 1000 = lowest)
   */
  priority: number;
  /**
   * Maximum requests per second for this provider
   */
  rateLimit?: number | null;
  /**
   * Provider-specific settings
   */
  config?: {
    google?: {
      /**
       * Google Maps Geocoding API key
       */
      apiKey: string;
      /**
       * ISO 3166-1 alpha-2 country code for result bias (e.g., 'US', 'GB')
       */
      region?: string | null;
      /**
       * Language for returned results (e.g., 'en', 'de', 'fr')
       */
      language?: string | null;
    };
    nominatim?: {
      /**
       * Nominatim server URL
       */
      baseUrl: string;
      /**
       * User agent string for requests (required by Nominatim policy)
       */
      userAgent: string;
      /**
       * Contact email for high-volume usage (recommended)
       */
      email?: string | null;
      /**
       * Comma-separated ISO 3166-1 alpha-2 codes to limit results (e.g., 'us,ca,gb')
       */
      countrycodes?: string | null;
      /**
       * Include detailed address components in results
       */
      addressdetails?: boolean | null;
      /**
       * Include additional OSM tags in results
       */
      extratags?: boolean | null;
    };
    opencage?: {
      /**
       * OpenCage Geocoding API key
       */
      apiKey: string;
      /**
       * ISO 639-1 language code for results (e.g., 'en', 'de', 'fr')
       */
      language?: string | null;
      /**
       * ISO 3166-1 alpha-2 country code to restrict results (e.g., 'US', 'DE')
       */
      countrycode?: string | null;
      /**
       * Restrict results to a specific geographic area
       */
      bounds?: {
        enabled?: boolean | null;
        southwest?: {
          lat?: number | null;
          lng?: number | null;
        };
        northeast?: {
          lat?: number | null;
          lng?: number | null;
        };
      };
      /**
       * Include additional metadata like timezone, currency, etc.
       */
      annotations?: boolean | null;
      /**
       * Abbreviate street names and components
       */
      abbrv?: boolean | null;
    };
  };
  /**
   * Tags for organizing and filtering providers
   */
  tags?:
    | (
        | 'production'
        | 'development'
        | 'testing'
        | 'backup'
        | 'primary'
        | 'secondary'
        | 'region-us'
        | 'region-eu'
        | 'region-asia'
        | 'region-global'
        | 'high-volume'
        | 'low-volume'
        | 'free-tier'
        | 'paid-tier'
      )[]
    | null;
  /**
   * Provider usage statistics (automatically updated)
   */
  statistics?: {
    totalRequests?: number | null;
    successfulRequests?: number | null;
    failedRequests?: number | null;
    lastUsed?: string | null;
    averageResponseTime?: number | null;
  };
  /**
   * Internal notes about this provider instance
   */
  notes?: string | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages".
 */
export interface Page {
  id: number;
  title: string;
  /**
   * URL-friendly identifier (auto-generated from name if not provided)
   */
  slug?: string | null;
  content?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-jobs".
 */
export interface PayloadJob {
  id: number;
  /**
   * Input data provided to the job
   */
  input?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  taskStatus?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  completedAt?: string | null;
  totalTried?: number | null;
  /**
   * If hasError is true this job will not be retried
   */
  hasError?: boolean | null;
  /**
   * If hasError is true, this is the error that caused it
   */
  error?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  /**
   * Task execution log
   */
  log?:
    | {
        executedAt: string;
        completedAt: string;
        taskSlug:
          | 'inline'
          | 'dataset-detection'
          | 'detect-schema'
          | 'analyze-duplicates'
          | 'validate-schema'
          | 'create-schema-version'
          | 'geocode-batch'
          | 'create-events'
          | 'cleanup-approval-locks'
          | 'url-fetch'
          | 'schedule-manager';
        taskID: string;
        input?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        output?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        state: 'failed' | 'succeeded';
        error?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        id?: string | null;
      }[]
    | null;
  taskSlug?:
    | (
        | 'inline'
        | 'dataset-detection'
        | 'detect-schema'
        | 'analyze-duplicates'
        | 'validate-schema'
        | 'create-schema-version'
        | 'geocode-batch'
        | 'create-events'
        | 'cleanup-approval-locks'
        | 'url-fetch'
        | 'schedule-manager'
      )
    | null;
  queue?: string | null;
  waitUntil?: string | null;
  processing?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: number;
  document?:
    | ({
        relationTo: 'catalogs';
        value: number | Catalog;
      } | null)
    | ({
        relationTo: 'datasets';
        value: number | Dataset;
      } | null)
    | ({
        relationTo: 'dataset-schemas';
        value: number | DatasetSchema;
      } | null)
    | ({
        relationTo: 'import-files';
        value: number | ImportFile;
      } | null)
    | ({
        relationTo: 'import-jobs';
        value: number | ImportJob;
      } | null)
    | ({
        relationTo: 'scheduled-imports';
        value: number | ScheduledImport;
      } | null)
    | ({
        relationTo: 'events';
        value: number | Event;
      } | null)
    | ({
        relationTo: 'users';
        value: number | User;
      } | null)
    | ({
        relationTo: 'media';
        value: number | Media;
      } | null)
    | ({
        relationTo: 'location-cache';
        value: number | LocationCache;
      } | null)
    | ({
        relationTo: 'geocoding-providers';
        value: number | GeocodingProvider;
      } | null)
    | ({
        relationTo: 'pages';
        value: number | Page;
      } | null)
    | ({
        relationTo: 'payload-jobs';
        value: number | PayloadJob;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: number;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: number;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "catalogs_select".
 */
export interface CatalogsSelect<T extends boolean = true> {
  name?: T;
  description?: T;
  slug?: T;
  isPublic?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "datasets_select".
 */
export interface DatasetsSelect<T extends boolean = true> {
  name?: T;
  description?: T;
  slug?: T;
  catalog?: T;
  language?: T;
  isPublic?: T;
  metadata?: T;
  idStrategy?:
    | T
    | {
        type?: T;
        externalIdPath?: T;
        computedIdFields?:
          | T
          | {
              fieldPath?: T;
              id?: T;
            };
        duplicateStrategy?: T;
      };
  schemaConfig?:
    | T
    | {
        enabled?: T;
        locked?: T;
        autoGrow?: T;
        autoApproveNonBreaking?: T;
        strictValidation?: T;
        allowTransformations?: T;
        maxSchemaDepth?: T;
        enumThreshold?: T;
        enumMode?: T;
      };
  deduplicationConfig?:
    | T
    | {
        enabled?: T;
        strategy?: T;
      };
  fieldMetadata?: T;
  typeTransformations?:
    | T
    | {
        fieldPath?: T;
        fromType?: T;
        toType?: T;
        transformStrategy?: T;
        customTransform?: T;
        enabled?: T;
        id?: T;
      };
  enumDetection?:
    | T
    | {
        mode?: T;
        threshold?: T;
      };
  geoFieldDetection?:
    | T
    | {
        autoDetect?: T;
        latitudePath?: T;
        longitudePath?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "dataset-schemas_select".
 */
export interface DatasetSchemasSelect<T extends boolean = true> {
  dataset?: T;
  versionNumber?: T;
  displayName?: T;
  schema?: T;
  fieldMetadata?: T;
  schemaSummary?:
    | T
    | {
        totalFields?: T;
        newFields?:
          | T
          | {
              path?: T;
              id?: T;
            };
        removedFields?:
          | T
          | {
              path?: T;
              id?: T;
            };
        typeChanges?:
          | T
          | {
              path?: T;
              oldType?: T;
              newType?: T;
              id?: T;
            };
        enumChanges?:
          | T
          | {
              path?: T;
              addedValues?: T;
              removedValues?: T;
              id?: T;
            };
      };
  importSources?:
    | T
    | {
        import?: T;
        recordCount?: T;
        batchCount?: T;
        id?: T;
      };
  approvalRequired?: T;
  approvedBy?: T;
  approvalNotes?: T;
  autoApproved?: T;
  conflicts?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "import-files_select".
 */
export interface ImportFilesSelect<T extends boolean = true> {
  originalName?: T;
  catalog?: T;
  datasets?: T;
  user?: T;
  sessionId?: T;
  status?: T;
  datasetsCount?: T;
  datasetsProcessed?: T;
  sheetMetadata?: T;
  jobId?: T;
  importedAt?: T;
  completedAt?: T;
  errorLog?: T;
  rateLimitInfo?: T;
  metadata?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "import-jobs_select".
 */
export interface ImportJobsSelect<T extends boolean = true> {
  importFile?: T;
  dataset?: T;
  sheetIndex?: T;
  stage?: T;
  progress?:
    | T
    | {
        current?: T;
        total?: T;
        batchNumber?: T;
      };
  schema?: T;
  schemaBuilderState?: T;
  schemaValidation?:
    | T
    | {
        isCompatible?: T;
        breakingChanges?: T;
        newFields?: T;
        requiresApproval?: T;
        approvalReason?: T;
        approved?: T;
        approvedBy?: T;
        approvedAt?: T;
      };
  datasetSchemaVersion?: T;
  duplicates?:
    | T
    | {
        strategy?: T;
        internal?: T;
        external?: T;
        summary?:
          | T
          | {
              totalRows?: T;
              uniqueRows?: T;
              internalDuplicates?: T;
              externalDuplicates?: T;
            };
      };
  geocodingCandidates?: T;
  geocodingResults?: T;
  geocodingProgress?:
    | T
    | {
        current?: T;
        total?: T;
      };
  results?: T;
  errors?:
    | T
    | {
        row?: T;
        error?: T;
        id?: T;
      };
  errorLog?: T;
  retryAttempts?: T;
  lastRetryAt?: T;
  nextRetryAt?: T;
  lastSuccessfulStage?: T;
  displayTitle?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "scheduled-imports_select".
 */
export interface ScheduledImportsSelect<T extends boolean = true> {
  name?: T;
  description?: T;
  enabled?: T;
  sourceUrl?: T;
  authConfig?:
    | T
    | {
        type?: T;
        apiKey?: T;
        apiKeyHeader?: T;
        bearerToken?: T;
        basicUsername?: T;
        basicPassword?: T;
        customHeaders?: T;
      };
  catalog?: T;
  datasetMapping?:
    | T
    | {
        mappingType?: T;
        singleDataset?: T;
        sheetMappings?:
          | T
          | {
              sheetIdentifier?: T;
              dataset?: T;
              skipIfMissing?: T;
              id?: T;
            };
      };
  importNameTemplate?: T;
  scheduleType?: T;
  frequency?: T;
  cronExpression?: T;
  maxRetries?: T;
  retryDelayMinutes?: T;
  timeoutSeconds?: T;
  lastRun?: T;
  nextRun?: T;
  lastStatus?: T;
  lastError?: T;
  currentRetries?: T;
  executionHistory?:
    | T
    | {
        executedAt?: T;
        status?: T;
        importFileId?: T;
        error?: T;
        duration?: T;
        id?: T;
      };
  statistics?:
    | T
    | {
        totalRuns?: T;
        successfulRuns?: T;
        failedRuns?: T;
        averageDuration?: T;
      };
  advancedConfig?:
    | T
    | {
        skipDuplicateCheck?: T;
        expectedContentType?: T;
        maxFileSize?: T;
      };
  metadata?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "events_select".
 */
export interface EventsSelect<T extends boolean = true> {
  dataset?: T;
  importJob?: T;
  data?: T;
  location?:
    | T
    | {
        latitude?: T;
        longitude?: T;
      };
  coordinateSource?:
    | T
    | {
        type?: T;
        importColumns?:
          | T
          | {
              latitudeColumn?: T;
              longitudeColumn?: T;
              combinedColumn?: T;
              format?: T;
            };
        confidence?: T;
        validationStatus?: T;
      };
  eventTimestamp?: T;
  validationErrors?: T;
  geocodingInfo?:
    | T
    | {
        originalAddress?: T;
        geocodingStatus?: T;
        provider?: T;
        confidence?: T;
        normalizedAddress?: T;
      };
  uniqueId?: T;
  sourceId?: T;
  contentHash?: T;
  importBatch?: T;
  schemaVersionNumber?: T;
  validationStatus?: T;
  transformations?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  firstName?: T;
  lastName?: T;
  role?: T;
  isActive?: T;
  lastLoginAt?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
  sessions?:
    | T
    | {
        id?: T;
        createdAt?: T;
        expiresAt?: T;
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
  sizes?:
    | T
    | {
        thumbnail?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        card?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        tablet?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "location-cache_select".
 */
export interface LocationCacheSelect<T extends boolean = true> {
  originalAddress?: T;
  normalizedAddress?: T;
  latitude?: T;
  longitude?: T;
  provider?: T;
  confidence?: T;
  hitCount?: T;
  lastUsed?: T;
  components?:
    | T
    | {
        streetNumber?: T;
        streetName?: T;
        city?: T;
        region?: T;
        postalCode?: T;
        country?: T;
      };
  metadata?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "geocoding-providers_select".
 */
export interface GeocodingProvidersSelect<T extends boolean = true> {
  name?: T;
  type?: T;
  enabled?: T;
  priority?: T;
  rateLimit?: T;
  config?:
    | T
    | {
        google?:
          | T
          | {
              apiKey?: T;
              region?: T;
              language?: T;
            };
        nominatim?:
          | T
          | {
              baseUrl?: T;
              userAgent?: T;
              email?: T;
              countrycodes?: T;
              addressdetails?: T;
              extratags?: T;
            };
        opencage?:
          | T
          | {
              apiKey?: T;
              language?: T;
              countrycode?: T;
              bounds?:
                | T
                | {
                    enabled?: T;
                    southwest?:
                      | T
                      | {
                          lat?: T;
                          lng?: T;
                        };
                    northeast?:
                      | T
                      | {
                          lat?: T;
                          lng?: T;
                        };
                  };
              annotations?: T;
              abbrv?: T;
            };
      };
  tags?: T;
  statistics?:
    | T
    | {
        totalRequests?: T;
        successfulRequests?: T;
        failedRequests?: T;
        lastUsed?: T;
        averageResponseTime?: T;
      };
  notes?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages_select".
 */
export interface PagesSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  content?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-jobs_select".
 */
export interface PayloadJobsSelect<T extends boolean = true> {
  input?: T;
  taskStatus?: T;
  completedAt?: T;
  totalTried?: T;
  hasError?: T;
  error?: T;
  log?:
    | T
    | {
        executedAt?: T;
        completedAt?: T;
        taskSlug?: T;
        taskID?: T;
        input?: T;
        output?: T;
        state?: T;
        error?: T;
        id?: T;
      };
  taskSlug?: T;
  queue?: T;
  waitUntil?: T;
  processing?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "main-menu".
 */
export interface MainMenu {
  id: number;
  navItems?:
    | {
        label: string;
        url: string;
        id?: string | null;
      }[]
    | null;
  _status?: ('draft' | 'published') | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "main-menu_select".
 */
export interface MainMenuSelect<T extends boolean = true> {
  navItems?:
    | T
    | {
        label?: T;
        url?: T;
        id?: T;
      };
  _status?: T;
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TaskDataset-detection".
 */
export interface TaskDatasetDetection {
  input?: unknown;
  output?: unknown;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TaskDetect-schema".
 */
export interface TaskDetectSchema {
  input?: unknown;
  output?: unknown;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TaskAnalyze-duplicates".
 */
export interface TaskAnalyzeDuplicates {
  input?: unknown;
  output?: unknown;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TaskValidate-schema".
 */
export interface TaskValidateSchema {
  input?: unknown;
  output?: unknown;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TaskCreate-schema-version".
 */
export interface TaskCreateSchemaVersion {
  input?: unknown;
  output?: unknown;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TaskGeocode-batch".
 */
export interface TaskGeocodeBatch {
  input?: unknown;
  output?: unknown;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TaskCreate-events".
 */
export interface TaskCreateEvents {
  input?: unknown;
  output?: unknown;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TaskCleanup-approval-locks".
 */
export interface TaskCleanupApprovalLocks {
  input?: unknown;
  output?: unknown;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TaskUrl-fetch".
 */
export interface TaskUrlFetch {
  input?: unknown;
  output?: unknown;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TaskSchedule-manager".
 */
export interface TaskScheduleManager {
  input?: unknown;
  output?: unknown;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}
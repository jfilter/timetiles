// @vitest-environment node
/**
 * Security tests for Preview endpoint authentication.
 *
 * These tests verify that the preview endpoint properly validates JWT tokens
 * via payload.auth() and rejects invalid authentication attempts.
 *
 * Related Issue: security-access-control-remediation-plan.md #1.6
 *
 * @module
 */

import { afterAll, beforeAll, describe, expect, it } from "vitest";

import type { User } from "@/payload-types";
import { createIntegrationTestEnvironment } from "@/tests/setup/test-environment-builder";

describe.sequential("Preview Endpoint Authentication", () => {
  let payload: any;
  let cleanup: () => Promise<void>;

  let userA: User;

  beforeAll(async () => {
    const env = await createIntegrationTestEnvironment();
    payload = env.payload;
    cleanup = env.cleanup;

    userA = await payload.create({
      collection: "users",
      data: {
        email: "user-a@preview-test.com",
        password: "password123",
        role: "user",
      },
    });
  }, 60000);

  afterAll(async () => {
    await cleanup();
  });

  describe("JWT Authentication", () => {
    it("should validate JWT tokens using payload.auth()", async () => {
      const token = await payload.login({
        collection: "users",
        data: {
          email: userA.email,
          password: "password123",
        },
      });

      const { user } = await payload.auth({
        headers: new Headers({
          Authorization: `Bearer ${token.token}`,
        }),
      });

      expect(user).toBeDefined();
      expect(user?.id).toBe(userA.id);
      expect(user?.email).toBe(userA.email);
    });

    it("should reject invalid JWT tokens", async () => {
      const invalidToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.fake.token";

      const { user } = await payload.auth({
        headers: new Headers({
          Authorization: `Bearer ${invalidToken}`,
        }),
      });

      expect(user).toBeNull();
    });
  });
});

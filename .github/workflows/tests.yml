name: CI Tests

on:
  push:
    branches: [main]
    paths-ignore:
      - "apps/docs/**"
      - "**.md"

  pull_request:
    branches: [main]
    paths-ignore:
      - "apps/docs/**"
      - "**.md"

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgis/postgis:17-3.5
        env:
          POSTGRES_USER: timetiles_user
          POSTGRES_PASSWORD: timetiles_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    env:
      DATABASE_URL: postgresql://timetiles_user:timetiles_password@localhost:5432/timetiles
      PAYLOAD_SECRET: test-secret-key
      PGPASSWORD: timetiles_password

    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "24"
          cache: "pnpm"

      - run: pnpm install

      - name: Setup databases
        run: |
          # Function to setup a database with PostGIS
          setup_db() {
            psql -h localhost -U timetiles_user -d postgres -c "CREATE DATABASE $1;"
            psql -h localhost -U timetiles_user -d $1 -c "CREATE EXTENSION IF NOT EXISTS postgis; CREATE EXTENSION IF NOT EXISTS postgis_topology; CREATE SCHEMA IF NOT EXISTS payload;"
          }

          # Create main database
          setup_db timetiles

          # Create test databases for parallel workers
          for i in {1..4}; do
            setup_db timetiles_test_$i
          done

      - name: Build and check code quality
        run: |
          cd apps/web && pnpm payload:migrate
          cd ../.. && pnpm build
          pnpm lint
          cd apps/web && pnpm typecheck

      - name: Run tests
        run: pnpm test:verbose
        working-directory: apps/web

      - name: Setup E2E environment
        run: |
          pnpm playwright install chromium --with-deps
          pnpm payload:migrate
          pnpm seed
          mkdir -p uploads
        working-directory: apps/web

      - name: Start server and run E2E tests
        run: |
          # Start server
          nohup pnpm start > server.log 2>&1 &
          echo $! > .server.pid

          # Wait for server (simplified)
          npx wait-on http-get://localhost:3000/api/health --timeout 60000 || {
            echo "Server failed to start. Logs:"
            cat server.log
            exit 1
          }

          # Run E2E tests
          pnpm test:e2e
        working-directory: apps/web
        env:
          NODE_ENV: production
          NEXT_PUBLIC_PAYLOAD_URL: http://localhost:3000
          PAYLOAD_CONFIG_PATH: ./payload.config.ts

      - name: Cleanup
        if: always()
        run: |
          if [ -f apps/web/.server.pid ]; then
            kill $(cat apps/web/.server.pid) || true
          fi

name: Test, Lint & Build

on:
  push:
    branches: [main]

  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgis/postgis:17-3.5
        env:
          POSTGRES_USER: timetiles_user
          POSTGRES_PASSWORD: timetiles_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    env:
      DATABASE_URL: postgresql://timetiles_user:timetiles_password@localhost:5432/timetiles
      PAYLOAD_SECRET: test-secret-key
      PGPASSWORD: timetiles_password
      NEXT_PUBLIC_PAYLOAD_URL: http://localhost:3000

    steps:
      - uses: actions/checkout@v4
        with:
          lfs: true
      - uses: pnpm/action-setup@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "24"
          cache: "pnpm"

      - run: pnpm install

      - name: Setup databases
        run: |
          # Function to setup a database with PostGIS
          setup_db() {
            psql -h localhost -U timetiles_user -d postgres -c "CREATE DATABASE $1;"
            psql -h localhost -U timetiles_user -d $1 -c "CREATE EXTENSION IF NOT EXISTS postgis; CREATE EXTENSION IF NOT EXISTS postgis_topology; CREATE SCHEMA IF NOT EXISTS payload;"
          }

          # Create main database
          setup_db timetiles

          # Create test database for E2E tests (matches Playwright config)
          setup_db timetiles_test

          # Create test databases for parallel workers
          for i in {1..4}; do
            setup_db timetiles_test_$i
          done

      - name: Run database migrations
        timeout-minutes: 2
        run: pnpm payload:migrate
        working-directory: apps/web

      - name: Build
        timeout-minutes: 10
        run: pnpm build:compile
        working-directory: apps/web

      - name: Lint Code
        timeout-minutes: 3
        run: pnpm lint
        continue-on-error: true

      - name: Lint Infrastructure
        timeout-minutes: 2
        run: |
          # Install linting tools
          mkdir -p $HOME/.local/bin
          export PATH=$HOME/.local/bin:$PATH
          
          # Install actionlint
          curl -sSfL https://github.com/rhysd/actionlint/releases/download/v1.7.4/actionlint_1.7.4_linux_amd64.tar.gz | tar xz -C $HOME/.local/bin actionlint
          
          # Install hadolint
          wget -q https://github.com/hadolint/hadolint/releases/download/v2.12.0/hadolint-Linux-x86_64 -O $HOME/.local/bin/hadolint
          chmod +x $HOME/.local/bin/hadolint $HOME/.local/bin/actionlint
          
          # shellcheck is already available in GitHub Actions runners
          
          # Run infrastructure linting
          pnpm lint:infra

      - name: Type check
        timeout-minutes: 3
        run: pnpm typecheck
        working-directory: apps/web

      - name: Check documentation links
        timeout-minutes: 2
        run: pnpm check-links:internal

      - name: Run tests with coverage
        run: pnpm test:coverage
        working-directory: apps/web
      
      - name: Report coverage
        if: always()
        run: npx tsx scripts/coverage-summary.ts --details >> $GITHUB_STEP_SUMMARY
      
      - name: SonarCloud Scan
        if: always()
        uses: SonarSource/sonarqube-scan-action@v3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Setup E2E environment
        timeout-minutes: 10
        run: |
          pnpm playwright install chromium --with-deps
          pnpm payload:migrate
          pnpm seed
          mkdir -p uploads
        working-directory: apps/web
        env:
          DATABASE_URL: postgresql://timetiles_user:timetiles_password@localhost:5432/timetiles_test

      - name: Start server and run E2E tests
        timeout-minutes: 15
        run: |
          # Start server on port 3002 to match Playwright config
          PORT=3002 nohup pnpm start > server.log 2>&1 &
          echo $! > .server.pid

          # Wait for server (updated to port 3002)
          npx wait-on http-get://localhost:3002/api/health --timeout 60000 || {
            echo "Server failed to start. Logs:"
            cat server.log
            exit 1
          }

          # Run E2E tests
          pnpm test:e2e
        working-directory: apps/web
        env:
          NODE_ENV: production
          DATABASE_URL: postgresql://timetiles_user:timetiles_password@localhost:5432/timetiles_test
          NEXT_PUBLIC_PAYLOAD_URL: http://localhost:3002
          PAYLOAD_CONFIG_PATH: ./payload.config.ts

      - name: Cleanup
        if: always()
        run: |
          if [ -f apps/web/.server.pid ]; then
            kill "$(cat apps/web/.server.pid)" || true
          fi
